#!/bin/sh

# .SCRIPTDOC

# This script snaps a shot using the webcam, then calculates a brightness value
# and automatically adjusts the screen brightness using xbacklight. This is
# especially useful for laptops without ambient brightness sensors.

# This script depends on ``convert`` (imagemagick), ``xbacklight``, and
# ``streamer``.

# You can configure this script with
# ``~/.config/autobacklight/autobacklight.cfg``. This should be a POSIX sh
# fragment, which may define the following variables:

# * ``brightness_lower_bound`` - brightness value which should be treated as
#   complete darkness, defaults to 0.

# * ``brightness_upper_bound`` - brightness value which should be treated
#   as complete lightness, defaults to 65536.

# .LICENSE
#
# Copyright (c) 2018, Charles Daniels
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

set -e
set -u

write_msg () {
	printf "%s\n" "$@" > /dev/stderr
}

check_in_path () {
	if [ ! -x "$(which $1)" ] ; then
		write_msg "ERROR: $1 not found"
		exit 1
	fi
}

get_brightness () {

	SNAPSHOT_PATH="/tmp/$(uuidgen).jpeg"
	write_msg "Taking snapshot at '$SNAPSHOT_PATH'... "
	streamer -f jpeg -o "$SNAPSHOT_PATH" > /dev/null 2>&1
	if [ ! -e "$SNAPSHOT_PATH" ] ; then
		write_msg "ERROR: failed to take snapshot!"
		exit 1
	fi

	write_msg "Calculating raw brightness... "
	RAW_BRIGHTNESS="$(convert "$SNAPSHOT_PATH" -colorspace Gray -format "%[fx:quantumrange*image.mean]" info: 2>&1)"

	write_msg "Normalizing brightness ($RAW_BRIGHTNESS)... "
	BRIGHTNESS="$(echo "scale=3 ; ($RAW_BRIGHTNESS - $brightness_lower_bound) / $brightness_upper_bound" | bc)"
	BRIGHTNESS="$(echo "$BRIGHTNESS * 100" | bc | cut -d. -f 1)"

	write_msg "Cleaning up... "
	rm -f "$SNAPSHOT_PATH"

	echo "$BRIGHTNESS"

}

check_in_path convert
check_in_path streamer
check_in_path xbacklight

CONFIG_PATH="$HOME/.config/autobacklight/autobacklight.cfg"
brightness_lower_bound=0
brightness_upper_bound=65536
if [ -e "$CONFIG_PATH" ] ; then
	write_msg "Loading config file from '$CONFIG_PATH'"
	. "$CONFIG_PATH"
fi
write_msg "Lower bound: $brightness_lower_bound"
write_msg "Upper bound: $brightness_upper_bound"

# run in a loop until the brightness value stabilizes, this adjusts for webcams
# that take time to adjust to ambient room brightness.
CURRENT_BRIGHTNESS="$(get_brightness)"
sleep 3s
LAST_BRIGHTNESS="$(get_brightness)"
while true ; do
	DIFFERENCE="$(echo "$CURRENT_BRIGHTNESS - $LAST_BRIGHTNESS" | bc)" 

	# absolute value
	if [ "$DIFFERENCE" -lt 0 ] ; then
		DIFFERENCE="$(echo "$DIFFERENCE * -1" | bc)"
	fi
	write_msg "Difference is $DIFFERENCE"

	# difference has staalized
	if [ "$DIFFERENCE" -lt 5 ] ; then
		break
	fi

	write_msg "Waiting for brightness to stabalize... "
	sleep 3s
	LAST_BRIGHTNESS=$CURRENT_BRIGHTNESS
	CURRENT_BRIGHTNESS="$(get_brightness)"
done


write_msg "Setting backlight for brightness $CURRENT_BRIGHTNESS"
xbacklight -set $CURRENT_BRIGHTNESS -time 2000

