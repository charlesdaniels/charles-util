.TH QUERY-WEBPAGE "1" "October 2018" "query-webpage " "User Commands"

.SH NAME
query-webpage - execute XPath queries on arbitrary URLs

.SH SYNOPSIS
query\-webpage [\-h] \fB\-\-url\fR URL \fB\-\-query\fR QUERY [\-\-extract_content]
[\-\-output_separator OUTPUT_SEPARATOR]
[\-\-disable_separator_expansion] [\-\-encoding ENCODING]
[\-\-noexpand] [\-\-quiet] [\-\-user_agent USER_AGENT]
[\-\-common_user_agent COMMON_USER_AGENT] [\-\-version]

.SH DESCRIPTION
.PP
Script to download the contents of a webpage, then print the results of a
specified XPath query and exit. Use cases primarily include extracting bits of
information readily located by XPath, such as counters or statuses. One
specific use case this tool has proven useful for was getting the number of
upvotes on a Reddit post. Disclaimer: this tool is intended for one off or very
low\-volume queries, and includes tools to facilitate that such as useragent
spoofing. Please be considerate of other people's servers and use a more
sophisticated tool and proper authentication (i.e. OAuth) if you plan to make
higher\-volume queries against other peoples sites. If you use this tool to
send hundreds of requests per minute while spoofing your use agent to
googlebot, you will probably get IP banned from whatever you are doing, and are
also very likely a bad person. In short, please be nice when using this tool.

.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-\-url\fR URL, \fB\-u\fR URL
Specify target URL.
.TP
\fB\-\-query\fR QUERY, \fB\-q\fR QUERY
Specify xPath query.
.TP
\fB\-\-extract_content\fR, \fB\-e\fR
Display content only as output, rather than HTML
markup
.TP
\fB\-\-output_separator\fR OUTPUT_SEPARATOR, \fB\-s\fR OUTPUT_SEPARATOR
Change string used to delimit matches to query in the
output. (default: single newline)
.TP
\fB\-\-disable_separator_expansion\fR, \fB\-E\fR
If asserted, escape sequences such as \en found within
the string supplied in \fB\-\-output_separator\fR will not be
expanded.
.TP
\fB\-\-encoding\fR ENCODING, \fB\-n\fR ENCODING
Specify string encoding to use where applicable.
(default: utf\-8)
.TP
\fB\-\-noexpand\fR, \fB\-x\fR
Assert to avoid expanding control characters such as
\en wherever possible.
.TP
\fB\-\-quiet\fR, \fB\-t\fR
Suppress all warning and error messages.
.TP
\fB\-\-user_agent\fR USER_AGENT, \fB\-a\fR USER_AGENT
Spoof an alternate user agent string. (default:
Python\-urllib/3.5)
.TP
\fB\-\-common_user_agent\fR COMMON_USER_AGENT, \fB\-A\fR COMMON_USER_AGENT
Select a user agent from a list of common ones. Valid
options are: firefox\-linux, googlebot, chromebook,
edge\-win10, chrome\-win7, safari\-macos. This overrides
any value given via \fB\-\-user_agent\fR
.TP
\fB\-\-version\fR
show program's version number and exit

.SH
EXAMPLES

.PP
$ query-webpage --url 'https://example.com' --query '//h1'

.IP
<h1>Example Domain</h1> 

.PP
$ query-webpage --url 'https://example.com' --query '//h1' --extract

.IP
Example Domain

.SH CHANGELOG

.IP 0.0.1
Initial version.

.SH HISTORY

This script was written in early 2018 during a talk on web scraping to prove
the point that useful web scraping could be accomplished in BASH. It has since
proven an invaluable tool for one-off XPath queries against web pages without
needing to spin up a Selenium instance, and is also handy for extracting data
out of locally saved HTML (via file://).

.SH COPYRIGHT

(c) 2018 Charles A. Daniels, All rights reserved.
